/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-dropdown-menu-light.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {PolymerElement} from '@polymer/polymer/polymer-element.js';

import {afterNextRender} from '@polymer/polymer/lib/utils/render-status.js';

import {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';

import {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';

import {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';

import {IronValidatableMixin} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';

import {html} from '@polymer/polymer/lib/utils/html-tag.js';

import {mixinBehaviors} from '@polymer/polymer/lib/legacy/class.js';

declare namespace AnypointElements {

  /**
   * # Anypoint styled version of the `paper-dropdown-menu` element.
   *
   * To be used with the API Console that must be styled for the platform.
   *
   * This is a faster, lighter version of `paper-dropdown-menu`, that does not
   * use a `<paper-input>` internally. Use this element if you're concerned about
   * the performance of this element, i.e., if you plan on using many dropdowns on
   * the same page. Note that this element has a slightly different styling API
   * than `paper-dropdown-menu`.
   * `paper-dropdown-menu` is similar to a native browser select element.
   * `paper-dropdown-menu` works with selectable content. The currently selected
   * item is displayed in the control. If no item is selected, the `label` is
   * displayed instead.
   *
   * Example:
   *
   *      <paper-dropdown-menu-light label="Your favourite pastry">
   *        <paper-listbox class="dropdown-content">
   *          <paper-item>Croissant</paper-item>
   *          <paper-item>Donut</paper-item>
   *          <paper-item>Financier</paper-item>
   *          <paper-item>Madeleine</paper-item>
   *        </paper-listbox>
   *      </paper-dropdown-menu-light>
   *
   * This example renders a dropdown menu with 4 options.
   * The child element with the class `dropdown-content` is used as the dropdown
   * menu. This can be a [`paper-listbox`](paper-listbox), or any other or
   * element that acts like an [`iron-selector`](iron-selector).
   * Specifically, the menu child must fire an
   * [`iron-select`](iron-selector#event-iron-select) event when one of its
   * children is selected, and an [`iron-deselect`](iron-selector#event-iron-deselect)
   * event when a child is deselected. The selected or deselected item must
   * be passed as the event's `detail.item` property.
   * Applications can listen for the `iron-select` and `iron-deselect` events
   * to react when options are selected and deselected.
   *
   * ### Styling
   *
   * The following custom properties and mixins are also available for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`
   * `--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`
   * `--paper-dropdown-menu-disabled-opacity` | The opacity of the dropdown when disabled  | `0.33`
   * `--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`
   * `--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`
   * `--paper-dropdown-menu-color` | The color of the input/label/underline when the dropdown is unfocused | `--primary-text-color`
   * `--paper-dropdown-menu-focus-color` | The color of the label/underline when the dropdown is focused  | `--primary-color`
   * `--paper-dropdown-error-color` | The color of the label/underline when the dropdown is invalid  | `--error-color`
   * `--paper-dropdown-menu-label` | Mixin applied to the label | `{}`
   * `--paper-dropdown-menu-input` | Mixin appled to the input | `{}`
   * `--paper-dropdown-menu-border-color` | Color of the border of the dropdown when opened | `var(--anypoint-color-aluminum4)`
   * `--paper-dropdown-menu-label-opened-color` | Color of the label when opened | `rgba(0, 0, 0, 0.24)`
   */
  class PaperDropdownMenuLight extends
    IronValidatableMixin(
    Object) {
    readonly keyBindings: any;

    /**
     * A reference to `paper-menu-button` element
     */
    readonly menuButton: HTMLElement|null;

    /**
     * The content element that is contained by the dropdown menu, if any.
     *    
     */
    readonly contentElement: any;

    /**
     * The derived "label" of the currently selected item. This value
     * is the `label` property on the selected item if set, or else the
     * trimmed text content of the selected item.
     */
    readonly selectedItemLabel: string|null|undefined;

    /**
     * The last selected item. An item is selected if the dropdown menu has
     * a child with class `dropdown-content`, and that child triggers an
     * `iron-select` event with the selected `item` in the `detail`.
     */
    readonly selectedItem: object|null;

    /**
     * The value for this element that will be used when submitting in
     * a form. It is read only, and will always have the same value
     * as `selectedItemLabel`.
     */
    value: string|null|undefined;

    /**
     * The label for the dropdown.
     */
    label: string|null|undefined;

    /**
     * The placeholder for the dropdown.
     */
    placeholder: string|null|undefined;

    /**
     * True if the dropdown is open. Otherwise, false.
     */
    opened: boolean|null|undefined;

    /**
     * By default, the dropdown will constrain scrolling on the page
     * to itself when opened.
     * Set to true in order to prevent scroll from being constrained
     * to the dropdown when it opens.
     */
    allowOutsideScroll: boolean|null|undefined;

    /**
     * The orientation against which to align the menu dropdown
     * horizontally relative to the dropdown trigger.
     */
    horizontalAlign: string|null|undefined;

    /**
     * The orientation against which to align the menu dropdown
     * vertically relative to the dropdown trigger.
     */
    verticalAlign: string|null|undefined;
    readonly hasContent: boolean|null|undefined;

    /**
     * If true, the `horizontalAlign` and `verticalAlign` properties will
     * be considered preferences instead of strict requirements when
     * positioning the dropdown and may be changed if doing so reduces
     * the area of the dropdown falling outside of `fitInto`.
     */
    dynamicAlign: boolean|null|undefined;
    _renderValue: string|null|undefined;

    /**
     * Returns false if the element is required and does not have a selection,
     * and true otherwise.
     *
     * @returns true if `required` is false, or if `required` is true
     * and the element has a valid selection.
     */
    _getValidity(): boolean;

    /**
     * Ensures attributes and registers listeners.
     */
    connectedCallback(): void;

    /**
     * Removes listeners
     */
    disconnectedCallback(): void;
    _clickHandler(e: any): void;

    /**
     * Show the dropdown content.
     */
    open(): void;

    /**
     * Hide the dropdown content.
     */
    close(): void;

    /**
     * A handler that is called when `iron-select` is fired.
     *
     * @param e An `iron-select` event.
     */
    _onIronSelect(e: CustomEvent|null): void;

    /**
     * A handler that is called when `iron-deselect` is fired.
     */
    _onIronDeselect(): void;

    /**
     * Compute the label for the dropdown given a selected item.
     *
     * @param selectedItem A selected Element item, with an
     * optional `label` property.
     */
    _selectedItemChanged(selectedItem: Element|null): void;
    _openedChanged(): void;
    _computeLabelVisible(hasContent: any, opened: any): any;
    _computeDefaultVisible(hasContent: any): any;
    _valueChanged(value: any): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "paper-dropdown-menu-light": AnypointElements.PaperDropdownMenuLight;
  }
}
